<scalastyle>
    <name>DriveTribe Scalastyle configuration</name>

    <!-- ================================================================================ -->
    <!--                               Rules we enforce                                   -->
    <!-- ================================================================================ -->
    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[1000]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[Future\[Try\[]]></parameter>
        </parameters>
        <customMessage><![CDATA[Please flatten the Try in the Future with Future.fromTry() and .flatten]]></customMessage>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[\sprintln]]></parameter>
        </parameters>
        <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]></customMessage>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[package.+\npackage]]></parameter>
        </parameters>
        <customMessage><![CDATA[Multi-package not allowed. Use single package definition and imports instead]]></customMessage>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[ .]pathEnd[ ({]]]></parameter>
        </parameters>
        <customMessage><![CDATA[Use pathEndOrSingleSlash instead of pathEnd]]></customMessage>
    </check>
    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.XmlLiteralChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="false">
        <parameters>
            <parameter name="maxMethods"><![CDATA[50]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>


    <!-- ================================================================================ -->
    <!--       Rules we'd like to enforce, but haven't cleaned up the codebase yet        -->
    <!-- ================================================================================ -->
    <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[120]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[20]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>
    <check level="warning" class="org.scalastyle.scalariform.WhileChecker" enabled="true"/>
    <check level="warning" class="org.scalastyle.scalariform.VarFieldChecker" enabled="true"/>
    <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>


    <!-- ================================================================================ -->
    <!--                              Rules to be discussed                               -->
    <!-- ================================================================================ -->
    <check level="warning" class="org.scalastyle.scalariform.ImportGroupingChecker" enabled="false"/>


    <!-- ================================================================================ -->
    <!--                               Rules we don't want                                -->
    <!-- ================================================================================ -->
    <!-- Too strict -->
    <check level="warning" class="org.scalastyle.scalariform.UnderscoreImportChecker" enabled="false"/>
    <!-- Too strict -->
    <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="false">
        <parameters>
            <parameter name="maximum"><![CDATA[15]]></parameter>
        </parameters>
    </check>
    <!-- We have Russian chars for some tests -->
    <check level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="false"/>
    <!-- Doesn't work with higher kinds -->
    <check level="error" class="org.scalastyle.scalariform.ClassTypeParameterChecker" enabled="false">
        <parameters>
            <parameter name="regex">^[A-Z][A-Za-z]*$</parameter>
        </parameters>
    </check>
    <!-- Too many exceptions -->
    <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="false">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
        </parameters>
    </check>
    <!-- Too restrictive -->
    <check level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="false"/>
    <check level="warning" class="org.scalastyle.scalariform.ForBraceChecker" enabled="false"/>
    <check level="warning" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="false"/>
    <check level="warning" class="org.scalastyle.file.BlockImportChecker" enabled="false"/>
    <check level="warning" class="org.scalastyle.scalariform.FieldNamesChecker" enabled="false">
        <parameters>
            <parameter name="regex">^[a-z][A-Za-z0-9]*$</parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="false">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.PatternMatchAlignChecker" enabled="false"/>
    <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="false">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.TodoCommentChecker" enabled="false">
        <parameters>
            <parameter default="TODO|FIXME" type="string" name="words"/>
        </parameters>
    </check>
    <!-- Doesn't work properly with block imports -->
    <check level="warning" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="false">
        <parameters>
            <parameter name="groups">java,scala,others,chumps</parameter>
            <parameter name="group.java">javax?\..*</parameter>
            <parameter name="group.scala">scala\..*</parameter>
            <parameter name="group.others">(?!io\.chumps\.).*</parameter>
            <parameter name="group.chumps">io\.chumps\..*</parameter>
        </parameters>
    </check>
    <!-- Doesn't support named parameters -->
    <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>
    <!-- No way to change the indentation check on classes params that is 4 by default -->
    <check level="warning" class="org.scalastyle.file.IndentationChecker" enabled="false">
        <parameters>
            <parameter name="tabSize">2</parameter>
            <parameter name="methodParamIndentSize">1</parameter>
        </parameters>
    </check>
    <!-- Doesn't work properly -->
    <check level="warning" class="org.scalastyle.file.IndentationChecker" enabled="false"/>
    <!-- We want the reverse -->
    <check level="warning" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"/>
    <!-- A bit difficult as there is many exceptions -->
    <check level="warning" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" enabled="false">
        <parameters>
            <parameter name="allowed">2</parameter>
            <parameter name="ignoreRegex">^\&quot;\&quot;$</parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="false"/>
    <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="false">
        <parameters>
            <parameter name="maxParameters"><![CDATA[8]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="false">
        <parameters>
            <parameter name="regex">^[ai]sInstanceOf$</parameter>
        </parameters>
        <customMessage>Avoid casting.</customMessage>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ScalaDocChecker" enabled="false"/>
</scalastyle>
